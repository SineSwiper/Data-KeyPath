=pod

=encoding utf-8

=head1 NAME

Data::Stash - Stash objects with "split serialization" capabities

=head1 SYNOPSIS

    use Data::Stash;
 
    # Store a gopher stash
    my $stash = Data::Stash->new( path_class => 'DZIL' );
    my $serialized = {
       'gophers[0].holes'      => 3,
       'gophers[0].food.type'  => 'grubs',
       'gophers[0].food.count' => 7,
 
       'gophers[1].holes'      => 1,
       'gophers[1].food.type'  => 'fruit',
       'gophers[1].food.count' => 5,
    };
    $stash->set($serialized);
 
    my $more_gophers = [];
    $more_gophers->[2] = {
       holes => 1,
       food  => {
          type  => 'earthworms',
          count => 15,
       },
    };
 
    $stash->flatten_and_set( { gophers => $more_gophers } ) // die $stash->error;
    $stash->set( 'gophers[2].holes' => 2 );  # just added a hole
 
         $serialized = $stash->get_all            // die $stash->error;
    my $deserialized = $stash->get_all_and_expand // die $stash->error;
 
    $stash->remove_all;
 
    # Store into CHI caches
    use CHI;
 
    my $cache = CHI->new( driver => 'Memory', global => 1 );
    my $stash = Data::Stash->new(
       path_class => 'DZIL',
       cache_obj  => $cache,
    );
    $stash->flatten_and_set($deserialized) // die $stash->error;

=head1 DESCRIPTION

Data::Stash is a module designed to store pathE<sol>value pairs.  Unlike other similar modules, Data::Stash can handle the flattening of
data structures into pathE<sol>value pairs using "split serialization", as well as turning these pairs back into data structures.
Data::Stash comes with its own set of path parsers to handle these transformations.

=head2 What is split serialization?

Split serialization is a unique form of serialization that only serializes part of the data structure (as a path on the left side) and
leaves the rest of the data, typically a scalar, untouched (as a value on the right side).  Consider the gopher example above:

    my $deserialized = {
       gophers => [
          {
             holes => 3,
             food  => {
                type  => 'grubs',
                count => 7,
             },
          },
          {
             holes => 1,
             food  => {
                type  => 'fruit',
                count => 5,
             },
          },
          {
             holes => 2,
             food  => {
                type  => 'earthworms',
                count => 15,
             },
          }
       ],
    };

A full serializer, like L<Data::Serializer> or L<Data::Dumper>, would turn the entire object into a string, much like the real code
above.  Or into JSON, XML, BerkleyDB, etc.  But, the end values would be lost in the stream.  If you were given an object like this,
how would you be able to store the data in an easy-to-access form for a caching module like L<CHI>?  It requires keyE<sol>value pairs.

Data::Stash uses split serialization to turn the data into a path like this:

    my $serialized = {
       'gophers[0].holes'      => 3,
       'gophers[0].food.type'  => 'grubs',
       'gophers[0].food.count' => 7,
 
       'gophers[1].holes'      => 1,
       'gophers[1].food.type'  => 'fruit',
       'gophers[1].food.count' => 5,
 
       'gophers[2].holes'      => 2,
       'gophers[2].food.type'  => 'earthworms',
       'gophers[2].food.count' => 15,
    };

Now, you can either stash the data into Data::Stash's own simple hash stash, or leverage a caching module like L<CHI> to store the
data in different formats.

=head2 How is this different than...?

=over

=item *

B<L<CHI>> - While CHI can be used with this module, CHI only supports storing keyE<sol>value pairs, with the ability to tie a serializer to
keys andE<sol>or values.  Hopefully, split serialization support could be added into CHI, but it would require a different set of getE<sol>set
commands.  (So, maybe Data::Stash should continue to be the topmost module...)

=back

=over

=item *

B<L<Data::DPath>> - DPath works in similar avenues as Data::Stash, but it's limited to its own DPath language, and is exclusively for
searching.

=back

=head1 CONSTRUCTOR

    # Defaults shown
    my $stash = Data::Stash->new(
       cache_obj    => Data::Stash::HashCache->new,
       path_class   => 'DZIL',
       path_options => {
          auto_normalize => 1,
          auto_cleanup   => 1,
       },
    );

Creates a new stash object.  Accepts the following arguments:

=head2 cache_obj

    cache_obj => Data::Stash::HashCache->new
    cache_obj => CHI->new( driver => 'Memory', global => 1 )

A caching object of some sort.  This object is used to store the data that gets split into a set of pathE<sol>value pairs.  Ideally, it
would be a L<CHI> cache, but it can be anything that supports the following methods: C<<< get set remove clear dump_as_hash get_keys >>>.

Default is a fresh L<Data::Stash::HashCache> object.

=head2 path_class

    path_class => 'File::Unix'
    path_class => '=MyApp::Data::Path::Foobar'

Class used to create new L<path objects|Data::Path::Role::Path> for path parsing.  With a C<<< = >>> prefix, it will use that as the full
class.  Otherwise, the class will be intepreted as C<<< Data::Path::$class >>>.

Default is L<DZIL|Data::Path::DZIL>.

=head2 path_options

    path_options => {
       auto_normalize => 1,
       auto_cleanup   => 1,
    }

Hash of options to pass to new path objects.  Typically, the default set of options are recommended to ensure a more commutative
path to be able to reuse in a get request.

=head1 METHODS

### FIXME: Needs definition of terms, including $ref ###
### FIXME: Needs MOAR examples! ###

=head2 Caching

These methods cover the getting and setting of stash data.  Ideally, you won't have to use anything beyond this section.

=head3 get

    my $data       = $stash->get($path, @options);
    my $serialized = $stash->get(qr/^\Q$path\E/, @options);
    my $serialized = $stash->get(\@paths, @options);

Get single or multiple values.  For single values, requires a path as a scalar, and returns the value for that path.

For multiple values, will accept either a Regexp to search the paths against, or an arrayref of paths.  (Admittedly, searching by
Regexp is not as flashy as a XPath-like string, but it's efficient and gets the job done.)  Returns a hashref of serialized
pathE<sol>data pairs.

If your cache object has C<<< get_multi_hashref >>> (like L<CHI>), it will use the method to its advantage.  Note that it won't pass the extra
arguments in that case.

=head3 get_all

    my $serialized = $stash->get_all(@options_if_any);

Handle to the C<<< dump_as_hash >>> method in your caching object, working exactly like it would there.

In the context of Data::Stash, this would be used to acquire the entire stash, in serialized form.  If you need it deserialized,
use L</get_all_and_expand> instead.

=head3 get_paths

    my @paths = $stash->get_paths(@options_if_any);

Handle to the C<<< get_keys >>> method in your caching object, working exactly like it would there.

=head3 get_and_expand

    my $deserialized_item  = $stash->get_and_expand($path, @options);
    my $deserialized_items = $stash->get_and_expand(qr/^\Q$path\E/, @options);
    my $deserialized_items = $stash->get_and_expand(\@paths, @options);

Similar to the L</get> method, but expands the result into its deserialized form.  If using the single path, you will only get a
single "tree" from this.  For example:

    # Single path
    my $hash = $stash->get_and_expand('gophers[1].food.count');
 
    # Returns:
    $hash = {
       gophers => [
          undef,
          {
             food  => {
                count => 5,
             },
          }
       ],
    };
 
    # Regexp search
    my $hash = $stash->get_and_expand(qr/^gophers\[\d+\]\.food/);
 
    # Returns:
    my $deserialized = {
       gophers => [
          {
             food  => {
                type  => 'grubs',
                count => 7,
             },
          },
          {
             food  => {
                type  => 'fruit',
                count => 5,
             },
          },
          {
             food  => {
                type  => 'earthworms',
                count => 15,
             },
          }
       ],
    };

=head3 get_all_and_expand

    my $deserialized = $stash->get_all_and_expand;

Similar to the L</get_all> method, but expands the pathE<sol>data hash into its deserialized form.

=head3 set

    $stash->set($path, $value, @options);
    $stash->set($serialized, @options);

Set single or multiple pathE<sol>value pairs.  For multiple values, requires a hashref with pathE<sol>value pairs.

If your cache object has C<<< set_multi >>> (like L<CHI>), it will use the method to its advantage.

=head3 flatten_and_set

    $stash->flatten_and_set($deserialized, @options);

Similar to the L</set> method, but flattens the result into its serialized form prior to the set operation.  Either single or multiple
pathE<sol>value pairs could come from the flatten operation, depending on how the hash tree (deserialized argument) is populated.

=head3 remove

    $stash->remove($path, @options_if_any);
    $stash->remove(qr/^\Q$path\E/, @options_if_any);
    $stash->remove(\@paths, @options_if_any);

Remove single or multiple values.  For single values, requires a path as a scalar.

For multiple values, will accept either a Regexp to search the paths against, or an arrayref of paths.  (Admittedly, searching by
Regexp is not as flashy as a XPath-like string, but it's efficient and gets the job done.)

If your cache object has C<<< remove_multi >>> (like L<CHI>), it will use the method to its advantage.  Note that it won't pass the extra
arguments in that case.

=head3 remove_all

    $stash->remove_all(@options_if_any);

Handle to the C<<< clear >>> method in your caching object, working exactly like it would there (ie: clean out the entire cache).

=head2 Expansion and Flattening

These methods are mostly utilitarian, used by the above caching functions to serializeE<sol>deserialize the data sets.  Unless you are
going to forgo the main stash functionality, you probably don't need to use these methods.

=head3 expand_hash

    my $deserialized = $stash->expand_hash($serialized);

ExpandsE<sol>deserializes a hash of pathE<sol>data pairs.  Returns the expanded object, which it usually a hashref, but might be an arrayref.
For example:

    # Starts with an array
    my $serialized = {
       '[0].thingy' => 1,
       '[1].thingy' => 2,
    };
    my $deserialized = $stash->expand_hash($serialized);
 
    # Returns:
    $deserialized = [
       { thingy => 1 },
       { thingy => 2 },
    ];

=head3 expand_pathval

    my $deserialized = $stash->expand_pathval($path, $value);

ExpandsE<sol>deserializes a single pathE<sol>data pair.  Returns the expanded object.

=head3 flatten_ref

    my $serialized = $self->flatten_ref($deserialized);

FlattensE<sol>serializes a ref.  Returns a serialized hashref of pathE<sol>value pairs.

=head3 flatten_refpath

    my $serialized = $self->flatten_refpath($path_prefix, $deserialized);
 
    # flatten_ref is basically this with some extra sanity checks
    my $serialized = $self->flatten_refpath('', $deserialized);

The real workhorse for C<<< flatten_ref >>>.  Recursively dives down the different pieces of the deserialized tree and eventually comes back
with the serialized hashref.  The path prefix can be used for prepending all of the paths returned in the serialized hashref.

=head3 merge

    my $newhash = $stash->merge($hash1, $hash2);

Merges two hashes.  This is a direct handle to C<<< merge >>> from an (internal) L<Hash::Merge> object, and is used by L</expand_hash> to
combine individual expanded objects.

=head3 set_merge_behavior

Handle to C<<< set_behavior >>> from the (internal) L<Hash::Merge> object.  B<Advanced usage only!>

Data::Stash uses a special custom type called C<<< LEFT_PRECEDENT_STRICT_ARRAY_INDEX >>>, which properly handles array indexes and dies
on any non-array-or-hash refs.

=head3 specify_merge_behavior

Handle to C<<< specify_behavior >>> from the (internal) L<Hash::Merge> object.  B<Advanced usage only!>

=head3 error

=head1 CAVEATS

=head2 Undefined values

Flattening will remove pathE<sol>values if the value is undefined.  This is to clean up unused array values that appeared as holes in a
sparse array.  For example:

    # From one of the basic tests
    my $round_trip = $stash->flatten_ref( $stash->expand_pathval(
       'a[0][1][1][1][1][2].too' => 'long'
    ) );
 
    # Without undef removal, this returns:
    $round_trip = {
       'a[0][0]'                 => undef,
       'a[0][1][0]'              => undef,
       'a[0][1][1][0]'           => undef,
       'a[0][1][1][1][0]'        => undef,
       'a[0][1][1][1][1][0]'     => undef,
       'a[0][1][1][1][1][1]'     => undef,
       'a[0][1][1][1][1][2].too' => 'long',
    };

=head2 Refs in split serialization

Split serialization works by looking for HASH or ARRAY refs and diving further into them, adding path prefixes as it goes down.  If
it encounters some other ref (like a SCALAR), it will stop and consider that to be the value for that path.  In terms of ref parsing,
this means two things:

=over

=item 1.

Only HASH and ARRAYs can be explained deeper.

=item 2.

If you have a HASH or ARRAY as a "value", serialization cannot tell the difference and it will be included in the path.

=back

The former isn't that big of a problem, since deeper dives with other kinds of refs are either not possible or dangerous (like CODE).

The latter could be a problem if you started with a hashref with a pathE<sol>data pair, expanded it, and tried to flatten it again.  This
can be solved by protecting the hash with a REF.  Consider this example:

    my $round_trip = $stash->flatten_ref( $stash->expand_pathval(
       'a[0]' => { your => 'hash' }
    ) );
 
    # Returns:
    $round_trip = {
       'a[0].your' => 'hash',
    };
 
    # Now protect the hash
    my $round_trip = $stash->flatten_ref( $stash->expand_pathval(
       'a[0]' => \{ your => 'hash' }
    ) );
 
    # Returns:
    $round_trip = {
       'a[0]' => \{ your => 'hash' }
    };

=head2 Sparse arrays and memory usage

=head1 TODO

Better searching.  The expanding, flattening, caching, and the pathing is done, and Regexp mode in C<<< get >>> does the trick in most cases.
But, this module still needs a good XPath-style wildcard search, which would make it a lot cooler.  This requires a lot of work on the
pathing to get it to work right, though.

=head1 SEE ALSO

### Ruler #######################################################################################################################12345

Other modules...

=head1 ACKNOWLEDGEMENTS

Kent Fredric for getting me started on the basic idea.

=head1 AVAILABILITY

The project homepage is L<https://github.com/SineSwiper/Data-Stash/wiki>.

The latest version of this module is available from the Comprehensive Perl
Archive Network (CPAN). Visit L<http://www.perl.com/CPAN/> to find a CPAN
site near you, or see L<https://metacpan.org/module/Data::KeyPath/>.

=for :stopwords cpan testmatrix url annocpan anno bugtracker rt cpants kwalitee diff irc mailto metadata placeholders metacpan

=head1 SUPPORT

=head2 Internet Relay Chat

You can get live help by using IRC ( Internet Relay Chat ). If you don't know what IRC is,
please read this excellent guide: L<http://en.wikipedia.org/wiki/Internet_Relay_Chat>. Please
be courteous and patient when talking to us, as we might be busy or sleeping! You can join
those networks/channels and get help:

=over 4

=item *

irc.perl.org

You can connect to the server at 'irc.perl.org' and talk to this person for help: SineSwiper.

=back

=head2 Bugs / Feature Requests

Please report any bugs or feature requests via L<https://github.com/SineSwiper/Data-Stash/issues>.

=head1 AUTHOR

Brendan Byrd <BBYRD@CPAN.org>

=head1 CONTRIBUTOR

Brendan Byrd <Perl@ResonatorSoft.org>

=head1 COPYRIGHT AND LICENSE

This software is Copyright (c) 2013 by Brendan Byrd.

This is free software, licensed under:

  The Artistic License 2.0 (GPL Compatible)

